"use strict";(self.webpackChunkchemotion_saurus=self.webpackChunkchemotion_saurus||[]).push([[7346],{9178:(e,t,n)=>{n.d(t,{u:()=>s});var o=n(7294),a=n(2814);const i=o.createElement("div",{style:{color:"red"}},"Error creating button.");function s(e){let t=0;return e.mixed&&(t=e.mixed.length),1==t&&e.color&&"object"==typeof e.mixed[0]?o.createElement("button",{className:"button button--xs button--"+e.color,style:{padding:"2px",width:"27px",height:"27px"}},o.createElement(a.G,{icon:e.mixed[0],size:"xs"})):t>0&&e.color?o.createElement("button",{className:"button button--xs button--"+e.color,style:{padding:"2px",height:"27px"}},function(e){const t=[];return e.map((e=>{"string"==typeof e||"number"==typeof e?t.push(e+" "):"object"==typeof e?(t.push(o.createElement(a.G,{icon:e,size:"xs"})),t.push(" ")):t.push(i)})),t}(e.mixed)):i}},4592:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var o=n(7462),a=(n(7294),n(3905)),i=(n(2814),n(1436)),s=n(9178);const r={id:"ci",title:"Continuous integration",sidebar_label:"Continuous integration",slug:"ci"},l=void 0,c={unversionedId:"eln/development/ci",id:"eln/development/ci",title:"Continuous integration",description:"Testing with GitHub Actions",source:"@site/docs/eln/development/continuous_integration.mdx",sourceDirName:"eln/development",slug:"/eln/development/ci",permalink:"/chemotionsaurus/docs/eln/development/ci",draft:!1,editUrl:"https://github.com/ComPlat/chemotion_saurus/edit/master/docs/eln/development/continuous_integration.mdx",tags:[],version:"current",lastUpdatedBy:"Jan C. Brammer",lastUpdatedAt:1638954326,formattedLastUpdatedAt:"Dec 8, 2021",frontMatter:{id:"ci",title:"Continuous integration",sidebar_label:"Continuous integration",slug:"ci"},sidebar:"elnSidebar",previous:{title:"Testing",permalink:"/chemotionsaurus/docs/eln/development/testing"},next:{title:"Investigating performance",permalink:"/chemotionsaurus/docs/eln/development/performance"}},u={},p=[{value:"Testing with GitHub Actions",id:"testing-with-github-actions",level:2},{value:"Skip tests",id:"skip-tests",level:3},{value:"User Interface",id:"user-interface",level:3},{value:"Developing CI with GitHub Actions",id:"developing-ci-with-github-actions",level:2},{value:"GitHub Actions in general",id:"github-actions-in-general",level:3},{value:"Runners",id:"runners",level:4},{value:"Self-hosted runners",id:"self-hosted-runners",level:5},{value:"Workflows",id:"workflows",level:4},{value:"Delete multiple workflow runs at once",id:"delete-multiple-workflow-runs-at-once",level:5},{value:"Jobs",id:"jobs",level:4},{value:"Steps and actions",id:"steps-and-actions",level:4},{value:"Workspace",id:"workspace",level:4},{value:"Variables",id:"variables",level:4},{value:"Status badge",id:"status-badge",level:4},{value:"Docker",id:"docker",level:4},{value:"Tools",id:"tools",level:4},{value:"GitHub CLI (command line tool)",id:"github-cli-command-line-tool",level:5},{value:"GitHub API",id:"github-api",level:5},{value:"Tmate",id:"tmate",level:5},{value:"Visual Studio Code",id:"visual-studio-code",level:5},{value:"Authentication",id:"authentication",level:4},{value:"Token",id:"token",level:5},{value:"GitHub bot",id:"github-bot",level:5},{value:"Node, webpack",id:"node-webpack",level:4},{value:"GitHub Actions for Chemotion ELN",id:"github-actions-for-chemotion-eln",level:3},{value:"Workflow files",id:"workflow-files",level:4},{value:"Docker",id:"docker-1",level:4},{value:"PostgreSQL",id:"postgresql",level:4},{value:"Acceptance tests",id:"acceptance-tests",level:4},{value:"Linting",id:"linting",level:5},{value:"Common errors",id:"common-errors",level:2},{value:"GitHub Actions services can be down",id:"github-actions-services-can-be-down",level:3},{value:"Random seed numbers",id:"random-seed-numbers",level:3},{value:"Yarn packages",id:"yarn-packages",level:3},{value:"Database",id:"database",level:3},{value:"Migration error",id:"migration-error",level:4},{value:"Npm test",id:"npm-test",level:4},{value:"Acceptance tests",id:"acceptance-tests-1",level:3},{value:"Memory (when using GitHub Actions)",id:"memory-when-using-github-actions",level:4},{value:"Welcome message",id:"welcome-message",level:4}],d={toc:p};function h(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"testing-with-github-actions"},"Testing with GitHub Actions"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/features/actions"},"GitHub Actions")," is the Continuous Integration and Deployment tool of GitHub.\nIt allows for running the tests automatically on every push to the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ComPlat/chemotion_ELN"},"Chemotion ELN GitHub repository"),".\nEvery kind of test (JavaScript, Ruby and acceptance) has its own ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions"},"GitHub Actions workflow"),"."),(0,a.kt)("h3",{id:"skip-tests"},"Skip tests"),(0,a.kt)("p",null,"If you want to run a subset of the test or commit without tests, you can use skip commands.\nMultiple skip commands can be combined. Insert one or more of the following skip commands in your commit message, where they are parsed by GitHub:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"skip unit js\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"skip unit rb\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"skip acceptance\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"skip all\n")),(0,a.kt)("p",null,"The acceptance test workflow contains ",(0,a.kt)("a",{parentName:"p",href:"#linting"},"linting"),", which can be skipped like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"skip linting\n")),(0,a.kt)("h3",{id:"user-interface"},"User Interface"),(0,a.kt)("p",null,"Most of the interactions with GH actions can be done via the Web UI of GitHub.\n",(0,a.kt)("img",{alt:"Workflows",src:n(452).Z,width:"1920",height:"1200"}),"\nTo view the status of the GH Actions (passing, failed or skipped), click on the Actions Tab in the repository.\nOn the left side all workflows are grouped for each yml file.\nYou can click on a button to view the single workflow runs of a workflow.\nThe name of a button corresponds to the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," attribute in the yml file."),(0,a.kt)("p",null,"The central panel lists all workflow runs of a single workflow yml file.\nClick on the ",(0,a.kt)("b",null,(0,a.kt)("inlineCode",{parentName:"p"},"..."))," button to ",(0,a.kt)("b",null,"delete one workflow run"),".\nClick on a single workflow to see the status (passing, failed or skipped) of the single jobs inside the workflow.\nClicking on a job shows you the status of the single steps inside the job.\nIn the steps view is a ",(0,a.kt)(s.u,{mixed:[i.b7W],color:"secondary",mdxType:"Btn"})," cog symbol in the upper\nright corner where you can get the ",(0,a.kt)("b",null," log files ")," of the corresponding job.\nThe job and steps view contains a button in the right upper corner to ",(0,a.kt)("b",null,(0,a.kt)("inlineCode",{parentName:"p"},"Re-run jobs"))," as well as a ",(0,a.kt)("b",null,(0,a.kt)("inlineCode",{parentName:"p"},"..."))," button\nallowing you to ",(0,a.kt)("b",null,"view the workflow yml file")," or create a ",(0,a.kt)("a",{parentName:"p",href:"#status-badge"},"status badge"),"."),(0,a.kt)("h2",{id:"developing-ci-with-github-actions"},"Developing CI with GitHub Actions"),(0,a.kt)("p",null,"In the following we shortly describe how to use GitHub Actions with a focus on the Chemotion ELN.\nFor more information look at the official ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions"},"GitHub documentation for Actions"),"."),(0,a.kt)("h3",{id:"github-actions-in-general"},"GitHub Actions in general"),(0,a.kt)("h4",{id:"runners"},"Runners"),(0,a.kt)("p",null,"Runners are applications provided by GitHub to execute the workflows.\nYou can install your own ",(0,a.kt)("inlineCode",{parentName:"p"},"self-hosted")," runner on your system or use runners hosted on GitHub servers.\nGitHub-hosted runners are specified by the OS keyword : ",(0,a.kt)("inlineCode",{parentName:"p"},"ubuntu-latest"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"windows-latest"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"macos-latest")," etc.\nFor more information see the GitHub documentation:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners"},"GitHub-hosted runners")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners"},"self-hosted runners"))),(0,a.kt)("h5",{id:"self-hosted-runners"},"Self-hosted runners"),(0,a.kt)("p",null,"You need at least admin rights on a repository to add self-hosted runners.\nGitHub-hosted runners can be invoked with write access.\nSelf-hosted runners must be linked to a repository (under ",(0,a.kt)("inlineCode",{parentName:"p"},"Settings/Actions/Runners"),") and installed as a service on a local machine.\nThe GitHub repository then invokes the service if a workflow is triggered and the actions are executed through the service on the local machine.\nSee the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/hosting-your-own-runners/adding-self-hosted-runners"},"GitHub documentation")," how to install runners.\nRunners have their own root directory ",(0,a.kt)("inlineCode",{parentName:"p"},"actions-runner"),"."),(0,a.kt)("p",null,"After installation you have to install the service of the runner:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cd actions-runner ;\nsudo ./svc.sh install ;\nsudo ./svc.sh start ;\n")),(0,a.kt)("p",null,"The status of a self-hosted runner can be checked on both sides:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"in the repository where all self-hosted runners are listed under ",(0,a.kt)("inlineCode",{parentName:"li"},"Settings/Actions/Runners")),(0,a.kt)("li",{parentName:"ul"},"on the local machine:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cd actions-runner ;\nsudo ./svc.sh status ;\n")))),(0,a.kt)("h4",{id:"workflows"},"Workflows"),(0,a.kt)("p",null,"Workflows are a bundle of ",(0,a.kt)("inlineCode",{parentName:"p"},"jobs")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"steps")," for creating tests.\nOne workflow is defined in one yml file, there can not be multiple workflows defined within one yml file.\nWorkflows are repeatable. To repeat a workflow without committing the code again click on the ",(0,a.kt)("inlineCode",{parentName:"p"},"Re-run jobs")," button (see the ",(0,a.kt)("a",{parentName:"p",href:"#user-interface"},"UI"),")."),(0,a.kt)("h5",{id:"delete-multiple-workflow-runs-at-once"},"Delete multiple workflow runs at once"),(0,a.kt)("p",null,"The easiest way to delete a whole workflow (i.e., all runs of it) at once is to use the GH ",(0,a.kt)("a",{parentName:"p",href:"#github-cli-command-line-tool"},"CLI tool"),".\nThere is no option to delete a whole workflow through the UI at the moment.\nWith the CLI you can get all workflows of a repository owned by a user or an organization,\nthen pick a specific workflow by its id, get all runs of this workflow and delete them sequentially."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"}," // GET all workflows\ngh api repos/{owner}/{repo}/actions/workflows\n\n// GET all runs from one workflow\ngh api repos/{owner}/{repo}/actions/{workflow_id}/runs\n\n// DELETE single run\ngh api repos/{owner}/{repo}/actions/runs/{run_id} -X DELETE\n")),(0,a.kt)("p",null,"Combine the commands in a loop and edit the resulting JSON data with the tool ",(0,a.kt)("inlineCode",{parentName:"p"},"jq")," (",(0,a.kt)("inlineCode",{parentName:"p"},"sudo apt-get install jq "),") for example on the chemotion_saurus repository:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'run_ids=( $(gh api repos/ComPlat/chemotion_saurus/actions/workflows/12327904/runs --paginate | jq \'.workflow_runs[].id\') )\nfor run_id in "${run_ids[@]}"\n  do\n    echo "Deleting Run ID $run_id"\n    gh api repos/ComPlat/chemotion_saurus/actions/runs/$run_id -X DELETE\n  done\n')),(0,a.kt)("h4",{id:"jobs"},"Jobs"),(0,a.kt)("p",null,"Currently, on GitHub Jobs are not repeatable (as opposed to GitLab).\nTo create repeatable tests you have to choose workflows instead of jobs for your tests.\nYou can choose different runners and services for each job and run multiple jobs inside one workflow.\nBy default jobs can run in parallel. If dependencies between jobs are needed, it can be specified with the ",(0,a.kt)("inlineCode",{parentName:"p"},"needs")," keyword."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"jobs:\n  deploy:\n    needs: build\n")),(0,a.kt)("h4",{id:"steps-and-actions"},"Steps and actions"),(0,a.kt)("p",null,"Steps are sequences of actions. Actions are the smallest unit in GitHub Continuous Integration.\nHere you can place the commands to execute your tests, e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"npm test"),".\nYou can script your own actions or use pre-scripted actions from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/marketplace?type=actions"},"GitHub Marketplace"),".\nActions inside steps depend on each other and can not run in parallel."),(0,a.kt)("h4",{id:"workspace"},"Workspace"),(0,a.kt)("p",null,"GH by default creates a workspaces to run actions. The path of the workspace can be read via ",(0,a.kt)("inlineCode",{parentName:"p"},"${{github.workspace}}"),".\nYou must pay attention on your workspace path when using Docker containers with a ",(0,a.kt)("inlineCode",{parentName:"p"},"WORKDIR"),". See ",(0,a.kt)("a",{parentName:"p",href:"#docker"},"Docker chapter"),"."),(0,a.kt)("admonition",{title:"Recommendation",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"When using some actions from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/marketplace?type=actions"},"GitHub Marketplace"),"\ne.g., the ",(0,a.kt)("inlineCode",{parentName:"p"},"checkout")," action - the workspace is flushed before the action. Make sure to run other commands\nafter ",(0,a.kt)("inlineCode",{parentName:"p"},"checkout")," or replace the action with a custom solution.\nFor example if you want to replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"checkout")," action use ",(0,a.kt)("inlineCode",{parentName:"p"},"git clone ..."),".")),(0,a.kt)("h4",{id:"variables"},"Variables"),(0,a.kt)("p",null,"GH offers different ways and levels to save variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When you have the appropriate permissions you can save environment variables as so called ",(0,a.kt)("inlineCode",{parentName:"li"},"secrets")," in\nyour GH repository under ",(0,a.kt)("inlineCode",{parentName:"li"},"Settings/Secrets"),". This has the advantage, that you can use them in different\nworkflows or across multiple repositories (for organization-level secrets). Call them  with ",(0,a.kt)("inlineCode",{parentName:"li"},"${{ secrets.XXX }}"),"."),(0,a.kt)("li",{parentName:"ul"},"You can create environment variables inside a workflow file with the ",(0,a.kt)("inlineCode",{parentName:"li"},"env")," keyword on the workflow,\njob or step level. Call them with ",(0,a.kt)("inlineCode",{parentName:"li"},"${{ env.XXX }}"),". GH sets some\n",(0,a.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables"},"default environment variables")," ."),(0,a.kt)("li",{parentName:"ul"},"On the job level you can create a\n",(0,a.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix"},(0,a.kt)("inlineCode",{parentName:"a"},"strategy.matrix")),".\nCall variables from that with ",(0,a.kt)("inlineCode",{parentName:"li"},"${{ matrix.XXX }}")),(0,a.kt)("li",{parentName:"ul"},"On the step level you can create normal shell variables. Call them with ",(0,a.kt)("inlineCode",{parentName:"li"},"$XXX"),".")),(0,a.kt)("h4",{id:"status-badge"},"Status badge"),(0,a.kt)("p",null,"A status badge per workflow can also be added to the ",(0,a.kt)("inlineCode",{parentName:"p"},"README")," file.\nFor quickly getting the Markdown code for a status badge go to the Actions tab on the GitHub repository,\nclick on the workflow, click on the dots on the right upper corner and click on ",(0,a.kt)("inlineCode",{parentName:"p"},"Create status badge"),"."),(0,a.kt)("h4",{id:"docker"},"Docker"),(0,a.kt)("p",null,"GH actions can run inside a Docker container and can also create a Docker container. For further information look at the official GitHub Documentation:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/creating-actions/dockerfile-support-for-github-actions"},"run actions inside Docker container")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://docs.github.com/en/actions/creating-actions/creating-a-docker-container-action"},"build Docker container inside actions"))),(0,a.kt)("p",null,"It is important to know that GitHub actions (for GitHub-hosted runners)\nautomatically ",(0,a.kt)("b",null,"mount a Docker container at the ",(0,a.kt)("inlineCode",{parentName:"p"},"WORKDIR")," of the Docker file,\nbut not in the ",(0,a.kt)("inlineCode",{parentName:"p"},"workspace")," of the GH actions."),"\nTherefore if you have actions that are by default set up in the ",(0,a.kt)("inlineCode",{parentName:"p"},"workspace"),"\n(e.g., by using actions from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/marketplace?type=actions"},"GitHub Marketplace"),")\nor if you want to access the files from the Docker container keep in mind to set your directories accordingly,\nfor example with the ",(0,a.kt)("inlineCode",{parentName:"p"},"working-directory")," attribute in yml or with unix commands (",(0,a.kt)("inlineCode",{parentName:"p"},"cd"),")."),(0,a.kt)("p",null,"The official documentation about running actions inside container can be a\nbit misleading because they suggest to not set the ",(0,a.kt)("inlineCode",{parentName:"p"},"USER"),", because the default\nuser in GH is root and the GH Actions ",(0,a.kt)("inlineCode",{parentName:"p"},"workspace")," will not be available.\nDespite that you can handle this by setting the owners inside the Docker\ncontainer in GH Actions to the original ",(0,a.kt)("inlineCode",{parentName:"p"},"USER")," defined in the Docker\nfile with ",(0,a.kt)("inlineCode",{parentName:"p"},"chown")," and avoid needing the GH ",(0,a.kt)("inlineCode",{parentName:"p"},"workspace")," with self-scripted actions."),(0,a.kt)("h4",{id:"tools"},"Tools"),(0,a.kt)("h5",{id:"github-cli-command-line-tool"},"GitHub CLI (command line tool)"),(0,a.kt)("p",null,"See here: ",(0,a.kt)("a",{parentName:"p",href:"https://github.blog/2021-04-15-work-with-github-actions-in-your-terminal-with-github-cli/"},"https://github.blog/2021-04-15-work-with-github-actions-in-your-terminal-with-github-cli/")),(0,a.kt)("h5",{id:"github-api"},"GitHub API"),(0,a.kt)("p",null,"GitHub offers two kind of APIs: REST and GraphQL.\nHere is the documentation for the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/reference/actions"},"GitHub Actions REST API"),"."),(0,a.kt)("h5",{id:"tmate"},"Tmate"),(0,a.kt)("p",null,"To maintain an open SSH session until the workflow run or the SSH session is closed,\nyou can use a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/marketplace/actions/debugging-with-tmate"},"tmate action"),".\nIt is useful for inspecting the server where the actions are running,\nfor example check versions and paths, but the workflows itself can not be rerun."),(0,a.kt)("h5",{id:"visual-studio-code"},"Visual Studio Code"),(0,a.kt)("p",null,"One good extension for syntax checking in the workflow yml files is the extension\n",(0,a.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=cschleiden.vscode-github-actions"},"GitHub Actions"),"."),(0,a.kt)("h4",{id:"authentication"},"Authentication"),(0,a.kt)("h5",{id:"token"},"Token"),(0,a.kt)("p",null,"Some operations need a way to authenticate during a workflow run.\nGitHub provides an automatic token, which is only valid during a workflow run:\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/reference/authentication-in-a-workflow"},"GITHUB_TOKEN"),".\nIn the workflow the token can be accessed like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"${{ github.token }}\n${{ secrets.GITHUB_TOKEN }}\n")),(0,a.kt)("h5",{id:"github-bot"},"GitHub bot"),(0,a.kt)("p",null,"Another way to authenticate is by using the bot user provided by GitHub: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/fregante/setup-git-user"},"setup-git-user action"),".\nThis is useful if you want to push to a repository inside a workflow.\nThe GitHub bot prevents recursive workflows, that is, a push by the bor does not invoke the CI workflows.\nIf you cannot use the setup-git-user action (because you are using a user other than root etc.),\nyou can configure the GitHub bot user in the workflow with these credentials:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"\ngit config --global user.name "github-actions[bot]"\n')),(0,a.kt)("h4",{id:"node-webpack"},"Node, webpack"),(0,a.kt)("p",null,"Do not set ",(0,a.kt)("inlineCode",{parentName:"p"},"NODE_ENV=test")," when running Rails tests. Just use ",(0,a.kt)("inlineCode",{parentName:"p"},"NODE_ENV=test")," for JavaScript tests.\nOtherwise the Babel configuration will get confused. The default for the ",(0,a.kt)("inlineCode",{parentName:"p"},"NODE_ENV")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"development"),".\nFor testing, set ",(0,a.kt)("inlineCode",{parentName:"p"},"RAILS_ENV=test")," and make custom configurations for testing for example in ",(0,a.kt)("inlineCode",{parentName:"p"},"webpack/config/development.js")," and with ",(0,a.kt)("inlineCode",{parentName:"p"},"process.env")," properties.\nHave a look at these article for more details:\n",(0,a.kt)("a",{parentName:"p",href:"https://rossta.net/blog/why-doesnt-webpacker-use-my-test-config-when-i-run-rails-tests.html"},"Why doesn't Webpacker use my test config when I run Rails tests?"),",\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rails/webpacker/issues/2654"},"GitHub issue in the rails/webpacker repository"),".\nThis article describes a way to customize the devtool setting:\n",(0,a.kt)("a",{parentName:"p",href:"https://itnext.io/how-to-speed-up-assets-precompile-for-ruby-on-rails-apps-e0338d8d7301"},"How to speed up assets precompile for Ruby on Rails apps"),".\nThe devtool controls how error paths are resolved in the browser console. In test and production mode no error log is needed,\ntherefore the devtool can be set to the fastest configuration.\nE. g. use this for compiling and running tests with the environment property ",(0,a.kt)("inlineCode",{parentName:"p"},"DEVTOOL"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"RAILS_ENV=test DEVTOOL=eval bundle exec rails webpacker:compile\nRAILS_ENV=test bundle exec rspec spec/features\n")),(0,a.kt)("p",null,"The webpack configuration could then be set like this in ",(0,a.kt)("inlineCode",{parentName:"p"},"config/webpack/development.js"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nconst webpackConfig = require('./base');\n\nconst { merge } = require('@rails/webpacker');\n\nif (process.env.DEVTOOL) {\n  const debugConfig = {\n    devtool: process.env.DEVTOOL\n  };\n  module.exports = merge(webpackConfig, debugConfig);\n} else {\n  module.exports = webpackConfig;\n}\n")),(0,a.kt)("p",null,"Values for the ",(0,a.kt)("inlineCode",{parentName:"p"},"devtool")," variable are listed in the ",(0,a.kt)("a",{parentName:"p",href:"https://webpack.js.org/configuration/devtool/"},"webpack documentation"),"."),(0,a.kt)("h3",{id:"github-actions-for-chemotion-eln"},"GitHub Actions for Chemotion ELN"),(0,a.kt)("h4",{id:"workflow-files"},"Workflow files"),(0,a.kt)("p",null,"Each kind of test (Ruby unit tests, JS unit test, acceptance tests) has its own workflow yml file,\nbecause that is the only way to make separate tests repeatable in GH Actions.\nWe only use a few pre-scripted actions from the GH Marketplace,\nbecause of the special version settings required by ",(0,a.kt)("inlineCode",{parentName:"p"},"nvm")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Node")," and because\npre-scripted actions are not easy to handle in our Docker containers."),(0,a.kt)("h4",{id:"docker-1"},"Docker"),(0,a.kt)("p",null,"Because of the large Ruby and npm libraries used in Chemotion ELN the jobs are running inside a Docker container with prebuilt libraries.\nWe use this ",(0,a.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/complat/complat-ubuntu-runner"},"Docker image")," which is built from the Dockerfile ",(0,a.kt)("inlineCode",{parentName:"p"},"Chemotion ELN/Dockerfile.focal.gitlab-ci"),".\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"WORKDIR")," of the Docker image is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"/home/gitlab-runner"),". Consequently, all ",(0,a.kt)("inlineCode",{parentName:"p"},"working-directory"),"\nattributes in the workflows are set to ",(0,a.kt)("inlineCode",{parentName:"p"},"/home/gitlab-runner")," as well as the ",(0,a.kt)("inlineCode",{parentName:"p"},"HOME")," environment variable inside the Docker container in the workflow.\nThe default root user inside Docker containers in GH actions is changed to the ",(0,a.kt)("inlineCode",{parentName:"p"},"USER gitlab-runner")," from the ComPlat Docker image."),(0,a.kt)("h4",{id:"postgresql"},"PostgreSQL"),(0,a.kt)("p",null,"For the database a ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/guides/creating-postgresql-service-containers"},"PostgreSQL container")," is used."),(0,a.kt)("admonition",{title:"Do not use 12 alpine version",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Do not use ",(0,a.kt)("inlineCode",{parentName:"p"},"image: postgres:12-alpine")," in the Chemotion ELN workflows. Otherwise there will be permission problems.\nUse ",(0,a.kt)("inlineCode",{parentName:"p"},"image: postgres")," as a postgres service.")),(0,a.kt)("h4",{id:"acceptance-tests"},"Acceptance tests"),(0,a.kt)("h5",{id:"linting"},"Linting"),(0,a.kt)("admonition",{title:"Info",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"This feature is still being reviewed and not available in the current development-5 branch.")),(0,a.kt)("p",null,"Before the acceptance tests, JavaScript and Ruby files will be linted.\nThe files will be automatically pushed to the repository by the ",(0,a.kt)("a",{parentName:"p",href:"#github-bot"},"GitHub Bot"),".\nIf no files are changed, ",(0,a.kt)("inlineCode",{parentName:"p"},"git add $FILES_JS $FILES_RB")," will throw an ",(0,a.kt)("inlineCode",{parentName:"p"},"Error: Process completed with exit code 1."),",\nbecause there are no files to add. But the workflow for acceptance tests will continue because of ",(0,a.kt)("inlineCode",{parentName:"p"},"continue-on-error: true")," in the workflow.\nLinting can be skipped with this command in the commit message:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"skip linting\n")),(0,a.kt)("h2",{id:"common-errors"},"Common errors"),(0,a.kt)("h3",{id:"github-actions-services-can-be-down"},"GitHub Actions services can be down"),(0,a.kt)("p",null,"If some GitHub services are not working, have a look at the ",(0,a.kt)("a",{parentName:"p",href:"https://www.githubstatus.com/"},"status page"),"."),(0,a.kt)("h3",{id:"random-seed-numbers"},"Random seed numbers"),(0,a.kt)("p",null,"The most common error for failing Ruby unit and acceptance tests are caused by seed numbers.\nTODO: flaky tests caused by seeds are problematic and need to be addressed."),(0,a.kt)("h3",{id:"yarn-packages"},"Yarn packages"),(0,a.kt)("p",null,"A lot of errors can be caused by a wrong Node or npm version or missing yarn packages:"),(0,a.kt)("div",{class:"boxBorder"},"> test",(0,a.kt)("p",null,">"," mocha --require '@babel/register' './spec/javascripts/helper/setup.js' './spec/javascripts/*",(0,a.kt)("em",{parentName:"p"},"/"),".spec.js'"),(0,a.kt)("p",null,"sh: 1: mocha: not found")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"source ~/.nvm/nvm.sh && nvm use 14.16.0 && yarn install\n")),(0,a.kt)("h3",{id:"database"},"Database"),(0,a.kt)("h4",{id:"migration-error"},"Migration error"),(0,a.kt)("p",null,"After ",(0,a.kt)("inlineCode",{parentName:"p"},"bundle exec db:migrate RAILS_ENV=test")," this error occurs:"),(0,a.kt)("div",{class:"boxBorder"},"bundle exec rake db: migrate failed",(0,a.kt)("p",null,"rake aborted!\nStandardError: An error has occurred, this and all later migrations canceled:"),(0,a.kt)("p",null,"undefined method `id' for nil:NilClass")),(0,a.kt)("p",null,"Reset the database and migrate again:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"bundle exec rake db:reset\nbundle exec db:migrate RAILS_ENV=test\n")),(0,a.kt)("h4",{id:"npm-test"},"Npm test"),(0,a.kt)("p",null,"In JavaScript unit tests:"),(0,a.kt)("div",{class:"boxBorder"},"Error: Cannot find module '../extra/ElementStoreXlisteners'"),"One possible source for that can be an error in your PostgreSQL set up. Check if databases etc. exist and are properly configured.",(0,a.kt)("h3",{id:"acceptance-tests-1"},"Acceptance tests"),(0,a.kt)("h4",{id:"memory-when-using-github-actions"},"Memory (when using GitHub Actions)"),(0,a.kt)("div",{class:"boxBorder"},"Compiling... Compilation failed:",(0,a.kt)("p",null,"<--- Last few GCs ---\x3e"),(0,a.kt)("p",null,"[2363:0x59c7170]","   144557 ms: Mark-sweep (reduce) 2030.2 (2054.6) -> 2029.8 (2055.1) MB, 2075.9 / 0.0 ms  (average mu = 0.115, current mu = 0.006) allocation failure scavenge might not succeed\n","[2363:0x59c7170]","   147210 ms: Mark-sweep (reduce) 2030.9 (2052.1) -> 2030.3 (2053.1) MB, 2326.8 / 0.0 ms  (average mu = 0.119, current mu = 0.123) allocation failure scavenge might not succeed"),(0,a.kt)("p",null,"<--- JS stacktrace ---\x3e"),(0,a.kt)("p",null,"FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory")),"Solved with setting a Node flag to increase memory size. Setting this flag as environment variable in GH actions script. Maybe the value in MB needs to be adjusted.",(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"--max_old_space_size=4096\n")),(0,a.kt)("h4",{id:"welcome-message"},"Welcome message"),(0,a.kt)("div",{class:"boxBorder"},'No route matches [GET] "/welcome-message.md"'),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"testing#acceptance-tests"},"local acceptance testing"),"."))}h.isMDXComponent=!0},452:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/gh_actions_ui-71f77473700d6efe61fde14a73575b4f.gif"}}]);