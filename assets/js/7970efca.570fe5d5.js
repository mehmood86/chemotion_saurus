"use strict";(self.webpackChunkchemotion_saurus=self.webpackChunkchemotion_saurus||[]).push([[8295],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=l(n),d=s,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2109:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var r=n(7462),s=n(3366),a=(n(7294),n(3905)),i=["components"],o={id:"testing",title:"Testing Code",sidebar_label:"Testing",slug:"testing"},c=void 0,l={unversionedId:"eln/development/testing",id:"version-1.1.1/eln/development/testing",title:"Testing Code",description:"We test the Chemotion ELN using three different kinds of tests.",source:"@site/versioned_docs/version-1.1.1/eln/development/testing.mdx",sourceDirName:"eln/development",slug:"/eln/development/testing",permalink:"/chemotionsaurus/docs/eln/development/testing",editUrl:"https://github.com/ComPlat/chemotion_saurus/edit/master/versioned_docs/version-1.1.1/eln/development/testing.mdx",tags:[],version:"1.1.1",lastUpdatedBy:"Danny Truong",lastUpdatedAt:1650478097,formattedLastUpdatedAt:"4/20/2022",frontMatter:{id:"testing",title:"Testing Code",sidebar_label:"Testing",slug:"testing"},sidebar:"elnSidebar",previous:{title:"Development",permalink:"/chemotionsaurus/docs/eln/development/development"},next:{title:"Continuous integration",permalink:"/chemotionsaurus/docs/eln/development/ci"}},p=[{value:"1. JavaScript (npm) unit tests",id:"1-javascript-npm-unit-tests",children:[],level:2},{value:"2. Ruby unit tests",id:"2-ruby-unit-tests",children:[],level:2},{value:"3. Acceptance (feature) tests",id:"3-acceptance-feature-tests",children:[],level:2},{value:"Local testing for Chemotion ELN",id:"local-testing-for-chemotion-eln",children:[{value:"Javascript (npm) unit tests",id:"javascript-npm-unit-tests",children:[],level:3},{value:"Ruby unit tests",id:"ruby-unit-tests",children:[],level:3},{value:"Acceptance tests",id:"acceptance-tests",children:[],level:3}],level:2}],u={toc:p};function m(e){var t=e.components,n=(0,s.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We test the Chemotion ELN using three different kinds of tests."),(0,a.kt)("h2",{id:"1-javascript-npm-unit-tests"},"1. JavaScript (npm) unit tests"),(0,a.kt)("p",null,"We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Mocha")," framework for JavaScript unit tests: ",(0,a.kt)("a",{parentName:"p",href:"https://mochajs.org/"},"https://mochajs.org/"),"."),(0,a.kt)("p",null,"These tests are configured with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"\"test\": \"mocha --require '@babel/register' './spec/javascripts/helper/setup.js' './spec/javascripts/**/*.spec.js'\"\n")),(0,a.kt)("p",null,"in the ",(0,a.kt)("inlineCode",{parentName:"p"},"scripts")," section of ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,a.kt)("h2",{id:"2-ruby-unit-tests"},"2. Ruby unit tests"),(0,a.kt)("p",null,"We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"RSpec")," framework for Ruby unit tests: ",(0,a.kt)("a",{parentName:"p",href:"https://rspec.info/"},"https://rspec.info/"),"."),(0,a.kt)("h2",{id:"3-acceptance-feature-tests"},"3. Acceptance (feature) tests"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Capybara")," framework is used alongside ",(0,a.kt)("inlineCode",{parentName:"p"},"RSpec")," to simulate user interactions: ",(0,a.kt)("a",{parentName:"p",href:"https://teamcapybara.github.io/capybara/"},"https://teamcapybara.github.io/capybara/"),".\nThe test driver is ",(0,a.kt)("inlineCode",{parentName:"p"},"Selenium"),": ",(0,a.kt)("a",{parentName:"p",href:"https://www.selenium.dev/"},"https://www.selenium.dev/"),"."),(0,a.kt)("h2",{id:"local-testing-for-chemotion-eln"},"Local testing for Chemotion ELN"),(0,a.kt)("p",null,"For locally testing the Chemotion ELN, change your directory to to the root directory of your Chemotion ELN. Then type the following commands: "),(0,a.kt)("h3",{id:"javascript-npm-unit-tests"},"Javascript (npm) unit tests"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"source ~/.rvm/scripts/rvm && source ~/.nvm/nvm.sh && nvm use && RAILS_ENV=test bundle exec rake db:test:prepare && npm test\n")),(0,a.kt)("h3",{id:"ruby-unit-tests"},"Ruby unit tests"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"source ~/.rvm/scripts/rvm && RAILS_ENV=test bundle exec rake db:test:prepare && bundle exec rspec --exclude-pattern spec/{features}/**/*_spec.rb\n")),(0,a.kt)("h3",{id:"acceptance-tests"},"Acceptance tests"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"source ~/.rvm/scripts/rvm && source ~/.nvm/nvm.sh && nvm use  && RAILS_ENV=test bundle exec rake db:test:prepare && bundle exec rake assets:precompile  && bundle exec rspec spec/features\n")),(0,a.kt)("p",null,"When you have freshly installed Chemotion ELN, make sure to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"welcome-message.md")," file in the ",(0,a.kt)("inlineCode",{parentName:"p"},"public")," directory inside Chemotion ELN\nbefore running acceptance tests. You can create it from the example file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"cp public/welcome-message-sample.md public/welcome-message.md\n")))}m.isMDXComponent=!0}}]);